/*
 * This file was generated by dbusidl2cpp version 0.6
 * Command line was: dbusidl2cpp -m -p viewer_proxy -- viewer/org.kde.nsplugins.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef VIEWER_PROXY_H_64831151689077
#define VIEWER_PROXY_H_64831151689077

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.nsplugins.Class
 */
class OrgKdeNspluginsClassInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.nsplugins.Class"; }

public:
    explicit OrgKdeNspluginsClassInterface(QDBusAbstractInterfacePrivate *p);

    ~OrgKdeNspluginsClassInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QString> getMIMEDescription()
    {
        return call(QLatin1String("getMIMEDescription"));
    }

    inline QDBusReply<QDBusObjectPath> newInstance(const QString &url, const QString &mimeType, bool embed, const QStringList &argn, const QStringList &argv, const QString &appId, const QString &callbackId, bool reload)
    {
        return call(QLatin1String("newInstance.ssbasasssb"), url, mimeType, embed, argn, argv, appId, callbackId, reload);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.kde.nsplugins.Instance
 */
class OrgKdeNspluginsInstanceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.nsplugins.Instance"; }

public:
    explicit OrgKdeNspluginsInstanceInterface(QDBusAbstractInterfacePrivate *p);

    ~OrgKdeNspluginsInstanceInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> displayPlugin()
    {
        return call(QLatin1String("displayPlugin"));
    }

    inline QDBusReply<void> javascriptResult(int id, const QString &result)
    {
        return call(QLatin1String("javascriptResult.is"), id, result);
    }

    inline QDBusReply<void> resizePlugin(int w, int h)
    {
        return call(QLatin1String("resizePlugin.ii"), w, h);
    }

    inline QDBusReply<int> setWindow()
    {
        return call(QLatin1String("setWindow"));
    }

    inline QDBusReply<int> setWindow(int remove)
    {
        return call(QLatin1String("setWindow.i"), remove);
    }

    inline QDBusReply<void> shutdown()
    {
        return call(QLatin1String("shutdown"));
    }

    inline QDBusReply<int> winId()
    {
        return call(QLatin1String("winId"));
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.kde.nsplugins.Viewer
 */
class OrgKdeNspluginsViewerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.nsplugins.Viewer"; }

public:
    explicit OrgKdeNspluginsViewerInterface(QDBusAbstractInterfacePrivate *p);

    ~OrgKdeNspluginsViewerInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QDBusObjectPath> newClass(const QString &plugin)
    {
        return call(QLatin1String("newClass.s"), plugin);
    }

    inline QDBusReply<void> shutdown()
    {
        return call(QLatin1String("shutdown"));
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace kde {
    namespace nsplugins {
      typedef ::OrgKdeNspluginsClassInterface Class;
      typedef ::OrgKdeNspluginsInstanceInterface Instance;
      typedef ::OrgKdeNspluginsViewerInterface Viewer;
    }
  }
}
#endif
