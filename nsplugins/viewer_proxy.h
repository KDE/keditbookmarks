/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -m -p viewer_proxy -- viewer/org.kde.nsplugins.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef VIEWER_PROXY_H_243681151890312
#define VIEWER_PROXY_H_243681151890312

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.nsplugins.Class
 */
class Q_DECL_EXPORT OrgKdeNspluginsClassInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.nsplugins.Class"; }

public:
    OrgKdeNspluginsClassInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeNspluginsClassInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QString> getMIMEDescription()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("getMIMEDescription"), argumentList);
    }

    inline QDBusReply<QDBusObjectPath> newInstance(const QString &url, const QString &mimeType, bool embed, const QStringList &argn, const QStringList &argv, const QString &appId, const QString &callbackId, bool reload)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url) << qVariantFromValue(mimeType) << qVariantFromValue(embed) << qVariantFromValue(argn) << qVariantFromValue(argv) << qVariantFromValue(appId) << qVariantFromValue(callbackId) << qVariantFromValue(reload);
        return callWithArgumentList(QDBus::Block, QLatin1String("newInstance"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.kde.nsplugins.Instance
 */
class Q_DECL_EXPORT OrgKdeNspluginsInstanceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.nsplugins.Instance"; }

public:
    OrgKdeNspluginsInstanceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeNspluginsInstanceInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> displayPlugin()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("displayPlugin"), argumentList);
    }

    inline QDBusReply<void> javascriptResult(int id, const QString &result)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(result);
        return callWithArgumentList(QDBus::Block, QLatin1String("javascriptResult"), argumentList);
    }

    inline QDBusReply<void> resizePlugin(int w, int h)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(w) << qVariantFromValue(h);
        return callWithArgumentList(QDBus::Block, QLatin1String("resizePlugin"), argumentList);
    }

    inline QDBusReply<int> setWindow()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("setWindow"), argumentList);
    }

    inline QDBusReply<int> setWindow(int remove)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(remove);
        return callWithArgumentList(QDBus::Block, QLatin1String("setWindow"), argumentList);
    }

    inline QDBusReply<void> shutdown()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("shutdown"), argumentList);
    }

    inline QDBusReply<int> winId()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("winId"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.kde.nsplugins.Viewer
 */
class Q_DECL_EXPORT OrgKdeNspluginsViewerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.nsplugins.Viewer"; }

public:
    OrgKdeNspluginsViewerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeNspluginsViewerInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QDBusObjectPath> newClass(const QString &plugin)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(plugin);
        return callWithArgumentList(QDBus::Block, QLatin1String("newClass"), argumentList);
    }

    inline QDBusReply<void> shutdown()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("shutdown"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace kde {
    namespace nsplugins {
      typedef ::OrgKdeNspluginsClassInterface Class;
      typedef ::OrgKdeNspluginsInstanceInterface Instance;
      typedef ::OrgKdeNspluginsViewerInterface Viewer;
    }
  }
}
#endif
