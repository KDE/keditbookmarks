/*
 * This file was generated by dbusidl2cpp version 0.6
 * Command line was: dbusidl2cpp -m -p callback_proxy -- ../org.kde.nsplugins.CallBack.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CALLBACK_PROXY_H_237291151537939
#define CALLBACK_PROXY_H_237291151537939

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <dbus/qdbus.h>

/*
 * Proxy class for interface org.kde.nsplugins.CallBack
 */
class OrgKdeNspluginsCallBackInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.nsplugins.CallBack"; }

public:
    explicit OrgKdeNspluginsCallBackInterface(QDBusAbstractInterfacePrivate *p);

    ~OrgKdeNspluginsCallBackInterface();

public Q_SLOTS: // METHODS
    inline Q_ASYNC void evalJavaScript(int id, const QString &script)
    {
        call(NoWaitForReply, QLatin1String("evalJavaScript.is"), id, script);
    }

    inline Q_ASYNC void postURL(const QString &url, const QString &target, const QByteArray &data, const QString &mime)
    {
        call(NoWaitForReply, QLatin1String("postURL.ssays"), url, target, data, mime);
    }

    inline Q_ASYNC void requestURL(const QString &url, const QString &target)
    {
        call(NoWaitForReply, QLatin1String("requestURL.ss"), url, target);
    }

    inline Q_ASYNC void statusMessage(const QString &msg)
    {
        call(NoWaitForReply, QLatin1String("statusMessage.s"), msg);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace kde {
    namespace nsplugins {
      typedef ::OrgKdeNspluginsCallBackInterface CallBack;
    }
  }
}
#endif
