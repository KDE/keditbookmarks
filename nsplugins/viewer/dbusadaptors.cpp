/*
 * This file was generated by dbusidl2cpp version 0.6
 * Command line was: dbusidl2cpp -m -a dbusadaptors -c ViewerAdaptor -i nsplugin.h -l NSPluginViewer -- org.kde.nsplugins.xml
 * Well, I didn't see that dbusidl2cpp had an [interface] cmdline option.
 * So the right way would be one file per interface, if this need regenerating.
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * This file HAS have been hand-edited, to rename the classes.
 */

#include "dbusadaptors.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ClassAdaptor
 */

ClassAdaptor::ClassAdaptor(NSPluginClass *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ClassAdaptor::~ClassAdaptor()
{
    // destructor
}

QString ClassAdaptor::getMIMEDescription()
{
    // handle method call org.kde.nsplugins.Class.getMIMEDescription
    QString out0;
    out0 = parent()->getMIMEDescription();
    return out0;
}

QDBusObjectPath ClassAdaptor::newInstance(const QString &url, const QString &mimeType, bool embed, const QStringList &argn, const QStringList &argv, const QString &appId, const QString &callbackId, bool reload)
{
    // handle method call org.kde.nsplugins.Class.newInstance
    QDBusObjectPath out0( parent()->newInstance(url, mimeType, embed, argn, argv, appId, callbackId, reload) ); // HAND-EDIT
    return out0;
}

/*
 * Implementation of adaptor class InstanceAdaptor
 */

InstanceAdaptor::InstanceAdaptor(NSPluginInstance *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

InstanceAdaptor::~InstanceAdaptor()
{
    // destructor
}

void InstanceAdaptor::displayPlugin()
{
    // handle method call org.kde.nsplugins.Instance.displayPlugin
    parent()->displayPlugin();
}

void InstanceAdaptor::javascriptResult(int id, const QString &result)
{
    // handle method call org.kde.nsplugins.Instance.javascriptResult
    parent()->javascriptResult(id, result);
}

void InstanceAdaptor::resizePlugin(int w, int h)
{
    // handle method call org.kde.nsplugins.Instance.resizePlugin
    parent()->resizePlugin(w, h);
}

int InstanceAdaptor::setWindow()
{
    // handle method call org.kde.nsplugins.Instance.setWindow
    int out0;
    out0 = parent()->setWindow();
    return out0;
}

int InstanceAdaptor::setWindow(int remove)
{
    // handle method call org.kde.nsplugins.Instance.setWindow
    int out0;
    out0 = parent()->setWindow(remove);
    return out0;
}

void InstanceAdaptor::shutdown()
{
    // handle method call org.kde.nsplugins.Instance.shutdown
    parent()->shutdown();
}

int InstanceAdaptor::winId()
{
    // handle method call org.kde.nsplugins.Instance.winId
    int out0;
    out0 = parent()->winId();
    return out0;
}

/*
 * Implementation of adaptor class ViewerAdaptor
 */

ViewerAdaptor::ViewerAdaptor(NSPluginViewer *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ViewerAdaptor::~ViewerAdaptor()
{
    // destructor
}

QDBusObjectPath ViewerAdaptor::newClass(const QString &plugin, const QDBusMessage& msg)
{
    // handle method call org.kde.nsplugins.Viewer.newClass
    // HAND-EDIT (simplify, and pass msg.sender)
    return QDBusObjectPath( parent()->newClass(plugin, msg.sender() ) );
}

void ViewerAdaptor::shutdown()
{
    // handle method call org.kde.nsplugins.Viewer.shutdown
    parent()->shutdown();
}


#include "dbusadaptors.moc"
